import Foundation
import PDFGenerator
import QRCoder

@objc class CloudBackupHelper: NSObject, UIDocumentInteractionControllerDelegate{
  
  @objc public var imageSize:CGFloat = 200;
  
  override init() {
    super.init()
  }
  
  @objc func backupBsms(data: String, password: String, callback: @escaping ((String)-> Void)){
    var pdfFiles = [String]()
    let pdf = generatePdf(data: data, password: password)
    print(pdf)
    pdfFiles.append(pdf)
      print(pdfFiles.count)
      if pdfFiles.count > 0 {
        uploadToIcloud(files: pdfFiles, callback: callback)
      }
  }
  
  func generatePdf(data: String, password: String) -> String{
    let currentDate = Date()
    let formatter = DateFormatter()
    formatter.dateStyle = .medium
    //formatter.timeStyle = .none
    let dateTime = formatter.string(from: currentDate)
    
    let txtTitle = UILabel();
    var txtPart = UILabel();
    let qrCodeImage = UIImageView();
    let generator = QRCodeGenerator();
    let frontPage =   UIView( frame: CGRect(x: 0.0,y: 0, width: 595.0, height: 840.0))
    // Title
    txtTitle.text = "Your Wallet Configurations"
    txtTitle.lineBreakMode = .byWordWrapping
    txtTitle.numberOfLines = 0
    txtTitle.font = UIFont.systemFont(ofSize: 26)
    txtTitle.textAlignment = .center
    txtTitle.frame = CGRect(x:20,y:20,width:frontPage.bounds.size.width - 5, height:frontPage.bounds.size.height)
    txtTitle.textColor = UIColor.black
    txtTitle.sizeToFit()
    frontPage.addSubview(txtTitle)
    
    let p1 = UILabel();
    p1.text = "This document is generated by the Bitcoin Keeper app. Need help? Reach out to us via the in-app chat support called Keeper Concierge. For more details visit: www.bitcoinkeeper.app.\n\n* Wallet configuration files standardize multi-signature setups, ensuring secure and interoperable configurations with public keys and derivation paths. This ensures that you do not have to rely on a single bitcoin wallet to create and use a multisig wallet.\n\n** Keeper and Sparrow are bitcoin wallets that allow you to create wallets called multisig wallets (In Keeper these are called Vaults). Multisig wallets, as the name suggests require multiple signatures to sign a single bitcoin transaction"
    p1.lineBreakMode = .byWordWrapping
    p1.numberOfLines = 0
    p1.font = UIFont.systemFont(ofSize: 14)
    p1.textAlignment = .justified
    p1.frame = CGRect(x:20,y:txtTitle.frame.height + txtTitle.font.ascender-1,width: 555, height:frontPage.bounds.size.height)
    p1.textColor = UIColor.black
    p1.sizeToFit()
    frontPage.addSubview(p1)
    var pages = [UIView]()
    pages.append(frontPage)
    if let jsonData = data.data(using: .utf8),
       let jsonArray = try? JSONSerialization.jsonObject(with: jsonData, options: []) as? [[String: Any]] {
        let parsedData = jsonArray.map { json -> (String, String) in
          let bsms = json["bsms"] as? String ?? ""
            let name = json["name"] as? String ?? ""
            return (bsms, name)
        }
        for (bsms, name) in parsedData {
          let page =   UIView( frame: CGRect(x: 0.0,y: 0, width: 595.0, height: 840.0))
          let textVaultName = UILabel();
          textVaultName.text = "Vault Name: "+name+"\n"
          textVaultName.lineBreakMode = .byWordWrapping
          textVaultName.numberOfLines = 0
          textVaultName.frame = CGRect(x:20,y:30,width:page.bounds.size.width - 20, height:30)
          textVaultName.font = UIFont.systemFont(ofSize: 12.0)
          textVaultName.font = UIFont.systemFont(ofSize: 12.0)
          textVaultName.textAlignment = .left
          textVaultName.sizeToFit()
          page.addSubview(textVaultName)
          
          let textBsms = UILabel();
          textBsms.text = "Wallet Configuration Text:\n -----------------------------------------------------------------------------------------------------\n"+bsms+"\n\n-----------------------------------------------------------------------------------------------------"
          textBsms.lineBreakMode = .byWordWrapping
          textBsms.numberOfLines = 0
          textBsms.isUserInteractionEnabled = true
          textBsms.frame = CGRect(x:20,y: 60,width:page.bounds.size.width - 20, height:120)
          textBsms.font = UIFont.systemFont(ofSize: 12.0)
          textBsms.textColor = UIColor.black
          textBsms.textAlignment = .left
          textBsms.sizeToFit()
          page.addSubview(textBsms)
          
          let textTime = UILabel();
          textTime.text = "File Details: File created on: " + dateTime + "\n\nWallet Configuration QR:\n"
          textTime.lineBreakMode = .byWordWrapping
          textTime.numberOfLines = 0
          textTime.isUserInteractionEnabled = true
          textTime.frame = CGRect(x:20,y: 90,width:page.bounds.size.width - 20, height:60)
          textTime.font = UIFont.systemFont(ofSize: 12.0)
          textTime.textColor = UIColor.black
          textTime.textAlignment = .left
          textTime.sizeToFit()
          page.addSubview(textTime)
          
          qrCodeImage.image = generator.createImage(value: bsms ,size: CGSize(width: imageSize, height: imageSize))
          qrCodeImage.frame = CGRect(x: 220, y: 350 , width: imageSize, height: imageSize)
          page.addSubview(qrCodeImage)
          pages.append(page)
        }
    } else {
        print("Error parsing JSON")
    }
    
    let pdfFileName = "Your-Wallet-Configurations-" + ".pdf"
    do {
      let pdfPath = NSTemporaryDirectory().appending(pdfFileName as String)
      try PDFGenerator.generate(pages, to: pdfPath, password: PDFPassword(password))
      print("file generated",pdfPath)
      return pdfPath
    } catch let error {
      print("error",error)
      return ""
    }
  }
  
  func getICloudFolder(named folderName: String) -> URL? {
      guard let iCloudURL = FileManager.default.url(forUbiquityContainerIdentifier: nil)?.appendingPathComponent("Documents") else {
          print("iCloud is not available.")
          return nil
      }
    return iCloudURL
  }
  
  func uploadToIcloud(files: [String], callback: @escaping ((String)-> Void)) {
    print("uploading to iCloud...")
    let fileManager = FileManager.default
    do {
      let iCloudFolderURL = getICloudFolder(named: "Bitcoin-Keeper")
      if iCloudFolderURL != nil {
        for filePath in files {
          let url = URL(fileURLWithPath: filePath)
          let fileName = url.lastPathComponent
          let destinationURL = iCloudFolderURL!.appendingPathComponent(fileName)
          if fileManager.fileExists(atPath: destinationURL.path) {
            try fileManager.removeItem(at: destinationURL)
            try fileManager.copyItem(at: url, to: destinationURL)
          } else {
            try fileManager.copyItem(at: url, to: destinationURL)
          }
        }
        let response = getJsonResponse(status: true, data: "", error: "")
        callback(response)
        //print("File uploaded to iCloud successfully.")
      } else {
        let response = getJsonResponse(status: false, data: "", error: "iCloud is currently inaccessible. Please check authentication with your iCloud and try again.")
        callback(response)
      }
    } catch{
      print("Error uploading file to iCloud: \(error.localizedDescription)")
      let response = getJsonResponse(status: false, data: "", error: error.localizedDescription)
      callback(response)
    }
  }
  
  func getJsonResponse(status: Bool, data: String, error: String) -> String {
      let jsonObject: [String: Any] = [
          "status": status,
          "data": data,
          "error": error
      ]
      do {
          let jsonData = try JSONSerialization.data(withJSONObject: jsonObject, options: [])
          if let jsonString = String(data: jsonData, encoding: .utf8) {
              return jsonString
          }
      } catch {
          print("Error creating JSON object: \(error.localizedDescription)")
      }
      return ""
  }
}
